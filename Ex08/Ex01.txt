Exercise Sheet 8

Ex.1
Operations:
(A) sort n numbers with quicksort
In the worst case, when the pivot element is always the biggest or always 
the smallest element, O(n) = n^2, because there will be no division but only
swap operations after comparing every item with the pivot.

(B) insert into empty hash table
In the worst case, all elements go into the same bucket. Depending on the algorithm,
the new element gets appended to a list (O(1)) or jumps to other positions in the hash
table, only to see that those are already occupied (O(n)).
Overall: O(n), with the initial O(n) of the first insertion try, because we use the 
linked list from Ex05

Block Operations:
(A) is an in place algorithm. This means that even in the worst case, there are still
not more operations needed. O(n/b log (n/b))

(B) in the worst case, every newly added element has to be stored into a bucket from a 
different cache block (if the tablesize >> cache block size or all in one bucket), 
therefore O(n). When a linked list is used, (like in ex05), accessing those elements 
and sorting new ones should give a lot of cache misses.
Normally, with an even distribution of elements over the hashtable: Ɵ(n/b)


Result:
In the worst case, (A) should be better with small cache sizes, because it is more 
cache efficient. As soon as n gets bigger, its advantage gets lost, for the number of
normal operations increase faster than in (B)
(B) should be better with big cache sizes and big n. Number of normal operations increases
more slowly than at (A)

